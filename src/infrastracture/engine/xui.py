import uuid
from typing import Optional

from infrastracture.logger import logger
from pyxui import XUI
from pyxui.errors import (
    BadLogin,
    NotFound,
)
from settings import config


class XUIClient:
    def __init__(self) -> None:
        self.client: XUI = XUI(
            full_address="http://localhost:2053",
            panel="sanaei",
            https=False,
        )

        self.default_inbound_id: int = 1
        if not self.login():
            logger.critical("‚ùå XUI login unsuccessful")

    def get_server_info(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ."""
        try:
            return self.client.get_inbound(self.default_inbound_id)["obj"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
            return {}

    def get_client(self, client_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID."""
        try:
            res = self.client.get_client(self.default_inbound_id, client_id)
            return None if res is NotFound else res
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ '{client_id}': {e}")
            return None

    def create_client(self, prefix: str = "") -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å UUID –∏ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º."""
        client_uuid = str(uuid.uuid4())
        client_id = f"{prefix}_{client_uuid}" if prefix else client_uuid

        try:
            self.client.add_client(self.default_inbound_id, client_id, client_uuid)
            logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {client_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ '{client_id}': {e}")
            raise

        return client_uuid

    def delete_client(self, client_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID."""
        try:
            self.client.delete_client(self.default_inbound_id, client_id)
            logger.info(f"üóë –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω: {client_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ '{client_id}': {e}")
            return False

    def login(self) -> bool:
        """–í–æ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å XUI."""
        try:
            self.client.login(
                username=config.XUI_USERNAME,
                password=config.XUI_PASSWORD,
            )
            logger.info("üîê –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ XUI")
            return True
        except BadLogin:
            logger.warning("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ XUI")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞ –≤ XUI: {e}")
            return False


xui_engine = XUIClient()
